(1) Please make it easy to contact people at the Perl foundation by listing their email addresses prominently.
(2) Perl is a language that each developer can shape to their own level of expertise through the use of pragmata. 
This leads to long lists of boiler plate 'use' statements at the front of each program.  These choices should be
settable once in an external options file.
(3) It should be possible for people to vote on Perl policy.
(4) Perl 7 will just produce another Perl 6. Much better to look for solutions like (2) above that resolve the issues through code
rather than the band aid of rebranding.
(5) ActiveState has too much involvement with Perl and is slowly dividing our efforts.
(6) We need more pragmata for instance:
  (a) Swap '->' and '.'
  (b) Define new dyadic operators not just redefine exsting dyadic operators
  (c) Better constants - the current solution using subs leads to very weird results
  (d) const a = ..., b = a + ..., c = 2 *a + b ...  just like Javascript
  (e) Make semicolons optional like Javascript as this greatly reduces the line noise that disfigures otherwise clean Perl code
 (7) Perl monks must not be disparged - they have done sterling work for decades - if 
 you want their web site modernized offer them some incentives to do so.  
 (8) I assume Perl is a trademark? Please start suing some people (like Google) who are using the trademark inappropriately.
 (9) Get Perl into web browsers.
 (11) Create a proper debugger.
 (12) Very slowly start removing CPAN modules which are not being actively supported.
 (13) Fix the documentation on perldoc - currently it is riddled with bugs like: 
 
 S
    __SUB__
    - the current subroutine, or C if not in a subroutine 

and no matter how many times one points out this defect nothing is done about it.
 (14) The perld doc search function is useless - duckduckgo is much better at searching perl documentation.  Please get rid of this pointless feature as it amkes Perl look ineffective.
 (15) Perl functions is full of functions like: getnetent which no ever uses yet they confuse the docuemntation for new users.  These functions should be in a separate module.
 (16) The perl decision making process is remote from the people who use perl every day: who decided that there was to be a Perl 7? As you have failed to ask the people for their opinion, so the people will deny you their support - just like Perl 6.
 (19) Try documenting an error involving __SUB__ using markdown on GitHUb issues and you will be surprised just how hard it is.
 (20) The core Perl deveopers must be made much more publicly accessable and publicly accountable to the people - at the moment they do what ever they want without regard to what is truly required.
 (21) Create a pragma that makes $ the default sigil rather than &  The current configuration makes it difficult to treat functions as first class objects.
 (22) Pragma to simplify the language to a point where it can be transpiled to Java or JavaScript or C and so we can write better IDEs for Perl.
 (23) Remove experimental warniongs even on new pragma unless they are specifically requested.  Switching the feature on is warning enough under normal circumstances. 
 (24) The TPF web page is useless- the people remote and uncontactable - no photos - it should be possible to click a link and video conference with these people promptly.
 (25) I cannot imagine that any-one actually donates throughteh TPF web page as it simply demands money without taking the time to explain why this is a good idea.
 (26) Provide a web page that allows people to write and execute Perl code immediately - with suitable pragmata turned on to give them a modern version of the language.
  (27) provide video conferencing on CPAN so if some-one is stuck with a module they can ask the developer of that module what to do.
  (28) set up a mentoring program so that expereinced developers can teach new developers.  Like Perl Monks but for a longer duration.
  (29) Improve Perl jobs so that any job mentioned on any web site any where in the world that involes Perl is also visible through Perl jobs - and then get rid of it with fanfare when the job is filled.
  (30) Please do not standardize on any one object oriented system - thay all have too many failings.
  (31)  "say" should write by default to STDERR as it writes immediately whereas the current default STDOUT buffers which causes confusion.
  (32) "Strength and unity from our diversity" :  Perl5 must incrementally recapture the leading edge it surrendered to Perl 6 so that 5 becomes the most modern language of them all.
 
